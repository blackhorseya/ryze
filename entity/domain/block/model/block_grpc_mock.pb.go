// Code generated by protoc-gen-go-grpc-mock. DO NOT EDIT.
// source: entity/domain/block/model/block.proto

package model

import (
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
	grpc "google.golang.org/grpc"
	metadata "google.golang.org/grpc/metadata"
)

// MockBlockService_GetBlocksClient is a mock of BlockService_GetBlocksClient interface.
type MockBlockService_GetBlocksClient struct {
	ctrl     *gomock.Controller
	recorder *MockBlockService_GetBlocksClientMockRecorder
}

// MockBlockService_GetBlocksClientMockRecorder is the mock recorder for MockBlockService_GetBlocksClient.
type MockBlockService_GetBlocksClientMockRecorder struct {
	mock *MockBlockService_GetBlocksClient
}

// NewMockBlockService_GetBlocksClient creates a new mock instance.
func NewMockBlockService_GetBlocksClient(ctrl *gomock.Controller) *MockBlockService_GetBlocksClient {
	mock := &MockBlockService_GetBlocksClient{ctrl: ctrl}
	mock.recorder = &MockBlockService_GetBlocksClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBlockService_GetBlocksClient) EXPECT() *MockBlockService_GetBlocksClientMockRecorder {
	return m.recorder
}

// CloseSend mocks base method.
func (m *MockBlockService_GetBlocksClient) CloseSend() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CloseSend")
	ret0, _ := ret[0].(error)
	return ret0
}

// CloseSend indicates an expected call of CloseSend.
func (mr *MockBlockService_GetBlocksClientMockRecorder) CloseSend() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CloseSend", reflect.TypeOf((*MockBlockService_GetBlocksClient)(nil).CloseSend))
}

// Context mocks base method.
func (m *MockBlockService_GetBlocksClient) Context() context.Context {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Context")
	ret0, _ := ret[0].(context.Context)
	return ret0
}

// Context indicates an expected call of Context.
func (mr *MockBlockService_GetBlocksClientMockRecorder) Context() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Context", reflect.TypeOf((*MockBlockService_GetBlocksClient)(nil).Context))
}

// Header mocks base method.
func (m *MockBlockService_GetBlocksClient) Header() (metadata.MD, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Header")
	ret0, _ := ret[0].(metadata.MD)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Header indicates an expected call of Header.
func (mr *MockBlockService_GetBlocksClientMockRecorder) Header() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Header", reflect.TypeOf((*MockBlockService_GetBlocksClient)(nil).Header))
}

// Recv mocks base method.
func (m *MockBlockService_GetBlocksClient) Recv() (*Block, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Recv")
	ret0, _ := ret[0].(*Block)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Recv indicates an expected call of Recv.
func (mr *MockBlockService_GetBlocksClientMockRecorder) Recv() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Recv", reflect.TypeOf((*MockBlockService_GetBlocksClient)(nil).Recv))
}

// RecvMsg mocks base method.
func (m *MockBlockService_GetBlocksClient) RecvMsg(arg0 interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RecvMsg", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// RecvMsg indicates an expected call of RecvMsg.
func (mr *MockBlockService_GetBlocksClientMockRecorder) RecvMsg(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecvMsg", reflect.TypeOf((*MockBlockService_GetBlocksClient)(nil).RecvMsg), arg0)
}

// SendMsg mocks base method.
func (m *MockBlockService_GetBlocksClient) SendMsg(arg0 interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendMsg", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMsg indicates an expected call of SendMsg.
func (mr *MockBlockService_GetBlocksClientMockRecorder) SendMsg(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMsg", reflect.TypeOf((*MockBlockService_GetBlocksClient)(nil).SendMsg), arg0)
}

// Trailer mocks base method.
func (m *MockBlockService_GetBlocksClient) Trailer() metadata.MD {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Trailer")
	ret0, _ := ret[0].(metadata.MD)
	return ret0
}

// Trailer indicates an expected call of Trailer.
func (mr *MockBlockService_GetBlocksClientMockRecorder) Trailer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Trailer", reflect.TypeOf((*MockBlockService_GetBlocksClient)(nil).Trailer))
}

// MockBlockService_GetBlocksServer is a mock of BlockService_GetBlocksServer interface.
type MockBlockService_GetBlocksServer struct {
	ctrl     *gomock.Controller
	recorder *MockBlockService_GetBlocksServerMockRecorder
}

// MockBlockService_GetBlocksServerMockRecorder is the mock recorder for MockBlockService_GetBlocksServer.
type MockBlockService_GetBlocksServerMockRecorder struct {
	mock *MockBlockService_GetBlocksServer
}

// NewMockBlockService_GetBlocksServer creates a new mock instance.
func NewMockBlockService_GetBlocksServer(ctrl *gomock.Controller) *MockBlockService_GetBlocksServer {
	mock := &MockBlockService_GetBlocksServer{ctrl: ctrl}
	mock.recorder = &MockBlockService_GetBlocksServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBlockService_GetBlocksServer) EXPECT() *MockBlockService_GetBlocksServerMockRecorder {
	return m.recorder
}

// Context mocks base method.
func (m *MockBlockService_GetBlocksServer) Context() context.Context {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Context")
	ret0, _ := ret[0].(context.Context)
	return ret0
}

// Context indicates an expected call of Context.
func (mr *MockBlockService_GetBlocksServerMockRecorder) Context() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Context", reflect.TypeOf((*MockBlockService_GetBlocksServer)(nil).Context))
}

// RecvMsg mocks base method.
func (m *MockBlockService_GetBlocksServer) RecvMsg(arg0 interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RecvMsg", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// RecvMsg indicates an expected call of RecvMsg.
func (mr *MockBlockService_GetBlocksServerMockRecorder) RecvMsg(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecvMsg", reflect.TypeOf((*MockBlockService_GetBlocksServer)(nil).RecvMsg), arg0)
}

// Send mocks base method.
func (m *MockBlockService_GetBlocksServer) Send(arg0 *Block) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Send", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Send indicates an expected call of Send.
func (mr *MockBlockService_GetBlocksServerMockRecorder) Send(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Send", reflect.TypeOf((*MockBlockService_GetBlocksServer)(nil).Send), arg0)
}

// SendHeader mocks base method.
func (m *MockBlockService_GetBlocksServer) SendHeader(arg0 metadata.MD) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendHeader", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendHeader indicates an expected call of SendHeader.
func (mr *MockBlockService_GetBlocksServerMockRecorder) SendHeader(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendHeader", reflect.TypeOf((*MockBlockService_GetBlocksServer)(nil).SendHeader), arg0)
}

// SendMsg mocks base method.
func (m *MockBlockService_GetBlocksServer) SendMsg(arg0 interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendMsg", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMsg indicates an expected call of SendMsg.
func (mr *MockBlockService_GetBlocksServerMockRecorder) SendMsg(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMsg", reflect.TypeOf((*MockBlockService_GetBlocksServer)(nil).SendMsg), arg0)
}

// SetHeader mocks base method.
func (m *MockBlockService_GetBlocksServer) SetHeader(arg0 metadata.MD) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetHeader", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetHeader indicates an expected call of SetHeader.
func (mr *MockBlockService_GetBlocksServerMockRecorder) SetHeader(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetHeader", reflect.TypeOf((*MockBlockService_GetBlocksServer)(nil).SetHeader), arg0)
}

// SetTrailer mocks base method.
func (m *MockBlockService_GetBlocksServer) SetTrailer(arg0 metadata.MD) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetTrailer", arg0)
}

// SetTrailer indicates an expected call of SetTrailer.
func (mr *MockBlockService_GetBlocksServerMockRecorder) SetTrailer(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetTrailer", reflect.TypeOf((*MockBlockService_GetBlocksServer)(nil).SetTrailer), arg0)
}

// MockBlockService_ScanBlockClient is a mock of BlockService_ScanBlockClient interface.
type MockBlockService_ScanBlockClient struct {
	ctrl     *gomock.Controller
	recorder *MockBlockService_ScanBlockClientMockRecorder
}

// MockBlockService_ScanBlockClientMockRecorder is the mock recorder for MockBlockService_ScanBlockClient.
type MockBlockService_ScanBlockClientMockRecorder struct {
	mock *MockBlockService_ScanBlockClient
}

// NewMockBlockService_ScanBlockClient creates a new mock instance.
func NewMockBlockService_ScanBlockClient(ctrl *gomock.Controller) *MockBlockService_ScanBlockClient {
	mock := &MockBlockService_ScanBlockClient{ctrl: ctrl}
	mock.recorder = &MockBlockService_ScanBlockClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBlockService_ScanBlockClient) EXPECT() *MockBlockService_ScanBlockClientMockRecorder {
	return m.recorder
}

// CloseSend mocks base method.
func (m *MockBlockService_ScanBlockClient) CloseSend() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CloseSend")
	ret0, _ := ret[0].(error)
	return ret0
}

// CloseSend indicates an expected call of CloseSend.
func (mr *MockBlockService_ScanBlockClientMockRecorder) CloseSend() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CloseSend", reflect.TypeOf((*MockBlockService_ScanBlockClient)(nil).CloseSend))
}

// Context mocks base method.
func (m *MockBlockService_ScanBlockClient) Context() context.Context {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Context")
	ret0, _ := ret[0].(context.Context)
	return ret0
}

// Context indicates an expected call of Context.
func (mr *MockBlockService_ScanBlockClientMockRecorder) Context() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Context", reflect.TypeOf((*MockBlockService_ScanBlockClient)(nil).Context))
}

// Header mocks base method.
func (m *MockBlockService_ScanBlockClient) Header() (metadata.MD, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Header")
	ret0, _ := ret[0].(metadata.MD)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Header indicates an expected call of Header.
func (mr *MockBlockService_ScanBlockClientMockRecorder) Header() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Header", reflect.TypeOf((*MockBlockService_ScanBlockClient)(nil).Header))
}

// Recv mocks base method.
func (m *MockBlockService_ScanBlockClient) Recv() (*Block, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Recv")
	ret0, _ := ret[0].(*Block)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Recv indicates an expected call of Recv.
func (mr *MockBlockService_ScanBlockClientMockRecorder) Recv() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Recv", reflect.TypeOf((*MockBlockService_ScanBlockClient)(nil).Recv))
}

// RecvMsg mocks base method.
func (m *MockBlockService_ScanBlockClient) RecvMsg(arg0 interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RecvMsg", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// RecvMsg indicates an expected call of RecvMsg.
func (mr *MockBlockService_ScanBlockClientMockRecorder) RecvMsg(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecvMsg", reflect.TypeOf((*MockBlockService_ScanBlockClient)(nil).RecvMsg), arg0)
}

// SendMsg mocks base method.
func (m *MockBlockService_ScanBlockClient) SendMsg(arg0 interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendMsg", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMsg indicates an expected call of SendMsg.
func (mr *MockBlockService_ScanBlockClientMockRecorder) SendMsg(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMsg", reflect.TypeOf((*MockBlockService_ScanBlockClient)(nil).SendMsg), arg0)
}

// Trailer mocks base method.
func (m *MockBlockService_ScanBlockClient) Trailer() metadata.MD {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Trailer")
	ret0, _ := ret[0].(metadata.MD)
	return ret0
}

// Trailer indicates an expected call of Trailer.
func (mr *MockBlockService_ScanBlockClientMockRecorder) Trailer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Trailer", reflect.TypeOf((*MockBlockService_ScanBlockClient)(nil).Trailer))
}

// MockBlockService_ScanBlockServer is a mock of BlockService_ScanBlockServer interface.
type MockBlockService_ScanBlockServer struct {
	ctrl     *gomock.Controller
	recorder *MockBlockService_ScanBlockServerMockRecorder
}

// MockBlockService_ScanBlockServerMockRecorder is the mock recorder for MockBlockService_ScanBlockServer.
type MockBlockService_ScanBlockServerMockRecorder struct {
	mock *MockBlockService_ScanBlockServer
}

// NewMockBlockService_ScanBlockServer creates a new mock instance.
func NewMockBlockService_ScanBlockServer(ctrl *gomock.Controller) *MockBlockService_ScanBlockServer {
	mock := &MockBlockService_ScanBlockServer{ctrl: ctrl}
	mock.recorder = &MockBlockService_ScanBlockServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBlockService_ScanBlockServer) EXPECT() *MockBlockService_ScanBlockServerMockRecorder {
	return m.recorder
}

// Context mocks base method.
func (m *MockBlockService_ScanBlockServer) Context() context.Context {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Context")
	ret0, _ := ret[0].(context.Context)
	return ret0
}

// Context indicates an expected call of Context.
func (mr *MockBlockService_ScanBlockServerMockRecorder) Context() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Context", reflect.TypeOf((*MockBlockService_ScanBlockServer)(nil).Context))
}

// RecvMsg mocks base method.
func (m *MockBlockService_ScanBlockServer) RecvMsg(arg0 interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RecvMsg", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// RecvMsg indicates an expected call of RecvMsg.
func (mr *MockBlockService_ScanBlockServerMockRecorder) RecvMsg(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecvMsg", reflect.TypeOf((*MockBlockService_ScanBlockServer)(nil).RecvMsg), arg0)
}

// Send mocks base method.
func (m *MockBlockService_ScanBlockServer) Send(arg0 *Block) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Send", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Send indicates an expected call of Send.
func (mr *MockBlockService_ScanBlockServerMockRecorder) Send(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Send", reflect.TypeOf((*MockBlockService_ScanBlockServer)(nil).Send), arg0)
}

// SendHeader mocks base method.
func (m *MockBlockService_ScanBlockServer) SendHeader(arg0 metadata.MD) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendHeader", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendHeader indicates an expected call of SendHeader.
func (mr *MockBlockService_ScanBlockServerMockRecorder) SendHeader(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendHeader", reflect.TypeOf((*MockBlockService_ScanBlockServer)(nil).SendHeader), arg0)
}

// SendMsg mocks base method.
func (m *MockBlockService_ScanBlockServer) SendMsg(arg0 interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendMsg", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMsg indicates an expected call of SendMsg.
func (mr *MockBlockService_ScanBlockServerMockRecorder) SendMsg(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMsg", reflect.TypeOf((*MockBlockService_ScanBlockServer)(nil).SendMsg), arg0)
}

// SetHeader mocks base method.
func (m *MockBlockService_ScanBlockServer) SetHeader(arg0 metadata.MD) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetHeader", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetHeader indicates an expected call of SetHeader.
func (mr *MockBlockService_ScanBlockServerMockRecorder) SetHeader(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetHeader", reflect.TypeOf((*MockBlockService_ScanBlockServer)(nil).SetHeader), arg0)
}

// SetTrailer mocks base method.
func (m *MockBlockService_ScanBlockServer) SetTrailer(arg0 metadata.MD) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetTrailer", arg0)
}

// SetTrailer indicates an expected call of SetTrailer.
func (mr *MockBlockService_ScanBlockServerMockRecorder) SetTrailer(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetTrailer", reflect.TypeOf((*MockBlockService_ScanBlockServer)(nil).SetTrailer), arg0)
}

// MockBlockServiceClient is a mock of BlockServiceClient interface.
type MockBlockServiceClient struct {
	ctrl     *gomock.Controller
	recorder *MockBlockServiceClientMockRecorder
}

// MockBlockServiceClientMockRecorder is the mock recorder for MockBlockServiceClient.
type MockBlockServiceClientMockRecorder struct {
	mock *MockBlockServiceClient
}

// NewMockBlockServiceClient creates a new mock instance.
func NewMockBlockServiceClient(ctrl *gomock.Controller) *MockBlockServiceClient {
	mock := &MockBlockServiceClient{ctrl: ctrl}
	mock.recorder = &MockBlockServiceClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBlockServiceClient) EXPECT() *MockBlockServiceClientMockRecorder {
	return m.recorder
}

// FetchAndStoreBlock mocks base method.
func (m *MockBlockServiceClient) FetchAndStoreBlock(ctx context.Context, in *FetchAndStoreBlockRequest, opts ...grpc.CallOption) (*FetchAndStoreBlockResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "FetchAndStoreBlock", varargs...)
	ret0, _ := ret[0].(*FetchAndStoreBlockResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FetchAndStoreBlock indicates an expected call of FetchAndStoreBlock.
func (mr *MockBlockServiceClientMockRecorder) FetchAndStoreBlock(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchAndStoreBlock", reflect.TypeOf((*MockBlockServiceClient)(nil).FetchAndStoreBlock), varargs...)
}

// GetBlock mocks base method.
func (m *MockBlockServiceClient) GetBlock(ctx context.Context, in *GetBlockRequest, opts ...grpc.CallOption) (*Block, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetBlock", varargs...)
	ret0, _ := ret[0].(*Block)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBlock indicates an expected call of GetBlock.
func (mr *MockBlockServiceClientMockRecorder) GetBlock(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBlock", reflect.TypeOf((*MockBlockServiceClient)(nil).GetBlock), varargs...)
}

// GetBlocks mocks base method.
func (m *MockBlockServiceClient) GetBlocks(ctx context.Context, in *GetBlocksRequest, opts ...grpc.CallOption) (BlockService_GetBlocksClient, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetBlocks", varargs...)
	ret0, _ := ret[0].(BlockService_GetBlocksClient)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBlocks indicates an expected call of GetBlocks.
func (mr *MockBlockServiceClientMockRecorder) GetBlocks(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBlocks", reflect.TypeOf((*MockBlockServiceClient)(nil).GetBlocks), varargs...)
}

// ScanBlock mocks base method.
func (m *MockBlockServiceClient) ScanBlock(ctx context.Context, in *ScanBlockRequest, opts ...grpc.CallOption) (BlockService_ScanBlockClient, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ScanBlock", varargs...)
	ret0, _ := ret[0].(BlockService_ScanBlockClient)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ScanBlock indicates an expected call of ScanBlock.
func (mr *MockBlockServiceClientMockRecorder) ScanBlock(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ScanBlock", reflect.TypeOf((*MockBlockServiceClient)(nil).ScanBlock), varargs...)
}

// MockBlockServiceServer is a mock of BlockServiceServer interface.
type MockBlockServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockBlockServiceServerMockRecorder
}

// MockBlockServiceServerMockRecorder is the mock recorder for MockBlockServiceServer.
type MockBlockServiceServerMockRecorder struct {
	mock *MockBlockServiceServer
}

// NewMockBlockServiceServer creates a new mock instance.
func NewMockBlockServiceServer(ctrl *gomock.Controller) *MockBlockServiceServer {
	mock := &MockBlockServiceServer{ctrl: ctrl}
	mock.recorder = &MockBlockServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBlockServiceServer) EXPECT() *MockBlockServiceServerMockRecorder {
	return m.recorder
}

// FetchAndStoreBlock mocks base method.
func (m *MockBlockServiceServer) FetchAndStoreBlock(ctx context.Context, in *FetchAndStoreBlockRequest) (*FetchAndStoreBlockResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FetchAndStoreBlock", ctx, in)
	ret0, _ := ret[0].(*FetchAndStoreBlockResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FetchAndStoreBlock indicates an expected call of FetchAndStoreBlock.
func (mr *MockBlockServiceServerMockRecorder) FetchAndStoreBlock(ctx, in interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchAndStoreBlock", reflect.TypeOf((*MockBlockServiceServer)(nil).FetchAndStoreBlock), ctx, in)
}

// GetBlock mocks base method.
func (m *MockBlockServiceServer) GetBlock(ctx context.Context, in *GetBlockRequest) (*Block, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBlock", ctx, in)
	ret0, _ := ret[0].(*Block)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBlock indicates an expected call of GetBlock.
func (mr *MockBlockServiceServerMockRecorder) GetBlock(ctx, in interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBlock", reflect.TypeOf((*MockBlockServiceServer)(nil).GetBlock), ctx, in)
}

// GetBlocks mocks base method.
func (m *MockBlockServiceServer) GetBlocks(blob *GetBlocksRequest, server BlockService_GetBlocksServer) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBlocks", blob, server)
	ret0, _ := ret[0].(error)
	return ret0
}

// GetBlocks indicates an expected call of GetBlocks.
func (mr *MockBlockServiceServerMockRecorder) GetBlocks(blob, server interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBlocks", reflect.TypeOf((*MockBlockServiceServer)(nil).GetBlocks), blob, server)
}

// ScanBlock mocks base method.
func (m *MockBlockServiceServer) ScanBlock(blob *ScanBlockRequest, server BlockService_ScanBlockServer) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ScanBlock", blob, server)
	ret0, _ := ret[0].(error)
	return ret0
}

// ScanBlock indicates an expected call of ScanBlock.
func (mr *MockBlockServiceServerMockRecorder) ScanBlock(blob, server interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ScanBlock", reflect.TypeOf((*MockBlockServiceServer)(nil).ScanBlock), blob, server)
}
