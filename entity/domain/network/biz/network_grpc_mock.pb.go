// Code generated by protoc-gen-go-grpc-mock. DO NOT EDIT.
// source: entity/domain/network/biz/network.proto

package biz

import (
	context "context"
	reflect "reflect"

	model "github.com/blackhorseya/ryze/entity/domain/network/model"
	gomock "go.uber.org/mock/gomock"
	grpc "google.golang.org/grpc"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// MockNetworkServiceClient is a mock of NetworkServiceClient interface.
type MockNetworkServiceClient struct {
	ctrl     *gomock.Controller
	recorder *MockNetworkServiceClientMockRecorder
}

// MockNetworkServiceClientMockRecorder is the mock recorder for MockNetworkServiceClient.
type MockNetworkServiceClientMockRecorder struct {
	mock *MockNetworkServiceClient
}

// NewMockNetworkServiceClient creates a new mock instance.
func NewMockNetworkServiceClient(ctrl *gomock.Controller) *MockNetworkServiceClient {
	mock := &MockNetworkServiceClient{ctrl: ctrl}
	mock.recorder = &MockNetworkServiceClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockNetworkServiceClient) EXPECT() *MockNetworkServiceClientMockRecorder {
	return m.recorder
}

// GetNetworkStats mocks base method.
func (m *MockNetworkServiceClient) GetNetworkStats(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*model.NetworkStats, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetNetworkStats", varargs...)
	ret0, _ := ret[0].(*model.NetworkStats)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNetworkStats indicates an expected call of GetNetworkStats.
func (mr *MockNetworkServiceClientMockRecorder) GetNetworkStats(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNetworkStats", reflect.TypeOf((*MockNetworkServiceClient)(nil).GetNetworkStats), varargs...)
}

// GetNodeStatus mocks base method.
func (m *MockNetworkServiceClient) GetNodeStatus(ctx context.Context, in *GetNodeStatusRequest, opts ...grpc.CallOption) (*model.NodeStatus, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetNodeStatus", varargs...)
	ret0, _ := ret[0].(*model.NodeStatus)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNodeStatus indicates an expected call of GetNodeStatus.
func (mr *MockNetworkServiceClientMockRecorder) GetNodeStatus(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNodeStatus", reflect.TypeOf((*MockNetworkServiceClient)(nil).GetNodeStatus), varargs...)
}

// MockNetworkServiceServer is a mock of NetworkServiceServer interface.
type MockNetworkServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockNetworkServiceServerMockRecorder
}

// MockNetworkServiceServerMockRecorder is the mock recorder for MockNetworkServiceServer.
type MockNetworkServiceServerMockRecorder struct {
	mock *MockNetworkServiceServer
}

// NewMockNetworkServiceServer creates a new mock instance.
func NewMockNetworkServiceServer(ctrl *gomock.Controller) *MockNetworkServiceServer {
	mock := &MockNetworkServiceServer{ctrl: ctrl}
	mock.recorder = &MockNetworkServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockNetworkServiceServer) EXPECT() *MockNetworkServiceServerMockRecorder {
	return m.recorder
}

// GetNetworkStats mocks base method.
func (m *MockNetworkServiceServer) GetNetworkStats(ctx context.Context, in *emptypb.Empty) (*model.NetworkStats, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNetworkStats", ctx, in)
	ret0, _ := ret[0].(*model.NetworkStats)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNetworkStats indicates an expected call of GetNetworkStats.
func (mr *MockNetworkServiceServerMockRecorder) GetNetworkStats(ctx, in interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNetworkStats", reflect.TypeOf((*MockNetworkServiceServer)(nil).GetNetworkStats), ctx, in)
}

// GetNodeStatus mocks base method.
func (m *MockNetworkServiceServer) GetNodeStatus(ctx context.Context, in *GetNodeStatusRequest) (*model.NodeStatus, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNodeStatus", ctx, in)
	ret0, _ := ret[0].(*model.NodeStatus)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNodeStatus indicates an expected call of GetNodeStatus.
func (mr *MockNetworkServiceServerMockRecorder) GetNodeStatus(ctx, in interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNodeStatus", reflect.TypeOf((*MockNetworkServiceServer)(nil).GetNodeStatus), ctx, in)
}
