// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: domain/transaction/biz/transaction.proto

package biz

import (
	context "context"
	model "github.com/blackhorseya/ryze/entity/domain/block/model"
	model1 "github.com/blackhorseya/ryze/entity/domain/transaction/model"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	TransactionService_ProcessBlockTransactions_FullMethodName  = "/transaction.TransactionService/ProcessBlockTransactions"
	TransactionService_ListTransactions_FullMethodName          = "/transaction.TransactionService/ListTransactions"
	TransactionService_ListTransactionsByAccount_FullMethodName = "/transaction.TransactionService/ListTransactionsByAccount"
)

// TransactionServiceClient is the client API for TransactionService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Service definition for handling transactions.
type TransactionServiceClient interface {
	ProcessBlockTransactions(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[model.Block, model1.Transaction], error)
	ListTransactions(ctx context.Context, in *ListTransactionRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[model1.Transaction], error)
	ListTransactionsByAccount(ctx context.Context, in *ListTransactionsByAccountRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[model1.Transaction], error)
}

type transactionServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewTransactionServiceClient(cc grpc.ClientConnInterface) TransactionServiceClient {
	return &transactionServiceClient{cc}
}

func (c *transactionServiceClient) ProcessBlockTransactions(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[model.Block, model1.Transaction], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &TransactionService_ServiceDesc.Streams[0], TransactionService_ProcessBlockTransactions_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[model.Block, model1.Transaction]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type TransactionService_ProcessBlockTransactionsClient = grpc.BidiStreamingClient[model.Block, model1.Transaction]

func (c *transactionServiceClient) ListTransactions(ctx context.Context, in *ListTransactionRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[model1.Transaction], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &TransactionService_ServiceDesc.Streams[1], TransactionService_ListTransactions_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[ListTransactionRequest, model1.Transaction]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type TransactionService_ListTransactionsClient = grpc.ServerStreamingClient[model1.Transaction]

func (c *transactionServiceClient) ListTransactionsByAccount(ctx context.Context, in *ListTransactionsByAccountRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[model1.Transaction], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &TransactionService_ServiceDesc.Streams[2], TransactionService_ListTransactionsByAccount_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[ListTransactionsByAccountRequest, model1.Transaction]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type TransactionService_ListTransactionsByAccountClient = grpc.ServerStreamingClient[model1.Transaction]

// TransactionServiceServer is the server API for TransactionService service.
// All implementations should embed UnimplementedTransactionServiceServer
// for forward compatibility.
//
// Service definition for handling transactions.
type TransactionServiceServer interface {
	ProcessBlockTransactions(grpc.BidiStreamingServer[model.Block, model1.Transaction]) error
	ListTransactions(*ListTransactionRequest, grpc.ServerStreamingServer[model1.Transaction]) error
	ListTransactionsByAccount(*ListTransactionsByAccountRequest, grpc.ServerStreamingServer[model1.Transaction]) error
}

// UnimplementedTransactionServiceServer should be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedTransactionServiceServer struct{}

func (UnimplementedTransactionServiceServer) ProcessBlockTransactions(grpc.BidiStreamingServer[model.Block, model1.Transaction]) error {
	return status.Errorf(codes.Unimplemented, "method ProcessBlockTransactions not implemented")
}
func (UnimplementedTransactionServiceServer) ListTransactions(*ListTransactionRequest, grpc.ServerStreamingServer[model1.Transaction]) error {
	return status.Errorf(codes.Unimplemented, "method ListTransactions not implemented")
}
func (UnimplementedTransactionServiceServer) ListTransactionsByAccount(*ListTransactionsByAccountRequest, grpc.ServerStreamingServer[model1.Transaction]) error {
	return status.Errorf(codes.Unimplemented, "method ListTransactionsByAccount not implemented")
}
func (UnimplementedTransactionServiceServer) testEmbeddedByValue() {}

// UnsafeTransactionServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TransactionServiceServer will
// result in compilation errors.
type UnsafeTransactionServiceServer interface {
	mustEmbedUnimplementedTransactionServiceServer()
}

func RegisterTransactionServiceServer(s grpc.ServiceRegistrar, srv TransactionServiceServer) {
	// If the following call pancis, it indicates UnimplementedTransactionServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&TransactionService_ServiceDesc, srv)
}

func _TransactionService_ProcessBlockTransactions_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(TransactionServiceServer).ProcessBlockTransactions(&grpc.GenericServerStream[model.Block, model1.Transaction]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type TransactionService_ProcessBlockTransactionsServer = grpc.BidiStreamingServer[model.Block, model1.Transaction]

func _TransactionService_ListTransactions_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ListTransactionRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(TransactionServiceServer).ListTransactions(m, &grpc.GenericServerStream[ListTransactionRequest, model1.Transaction]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type TransactionService_ListTransactionsServer = grpc.ServerStreamingServer[model1.Transaction]

func _TransactionService_ListTransactionsByAccount_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ListTransactionsByAccountRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(TransactionServiceServer).ListTransactionsByAccount(m, &grpc.GenericServerStream[ListTransactionsByAccountRequest, model1.Transaction]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type TransactionService_ListTransactionsByAccountServer = grpc.ServerStreamingServer[model1.Transaction]

// TransactionService_ServiceDesc is the grpc.ServiceDesc for TransactionService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TransactionService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "transaction.TransactionService",
	HandlerType: (*TransactionServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ProcessBlockTransactions",
			Handler:       _TransactionService_ProcessBlockTransactions_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "ListTransactions",
			Handler:       _TransactionService_ListTransactions_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "ListTransactionsByAccount",
			Handler:       _TransactionService_ListTransactionsByAccount_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "domain/transaction/biz/transaction.proto",
}
