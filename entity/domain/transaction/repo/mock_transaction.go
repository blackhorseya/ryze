// Code generated by MockGen. DO NOT EDIT.
// Source: transaction.go
//
// Generated by this command:
//
//	mockgen -destination=./mock_transaction.go -package=repo -source=transaction.go
//

// Package repo is a generated GoMock package.
package repo

import (
	context "context"
	reflect "reflect"

	model "github.com/blackhorseya/ryze/entity/domain/transaction/model"
	gomock "go.uber.org/mock/gomock"
)

// MockITransactionRepo is a mock of ITransactionRepo interface.
type MockITransactionRepo struct {
	ctrl     *gomock.Controller
	recorder *MockITransactionRepoMockRecorder
}

// MockITransactionRepoMockRecorder is the mock recorder for MockITransactionRepo.
type MockITransactionRepoMockRecorder struct {
	mock *MockITransactionRepo
}

// NewMockITransactionRepo creates a new mock instance.
func NewMockITransactionRepo(ctrl *gomock.Controller) *MockITransactionRepo {
	mock := &MockITransactionRepo{ctrl: ctrl}
	mock.recorder = &MockITransactionRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockITransactionRepo) EXPECT() *MockITransactionRepoMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockITransactionRepo) Create(c context.Context, item *model.Transaction) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", c, item)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockITransactionRepoMockRecorder) Create(c, item any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockITransactionRepo)(nil).Create), c, item)
}

// GetByID mocks base method.
func (m *MockITransactionRepo) GetByID(c context.Context, id string) (*model.Transaction, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByID", c, id)
	ret0, _ := ret[0].(*model.Transaction)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByID indicates an expected call of GetByID.
func (mr *MockITransactionRepoMockRecorder) GetByID(c, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByID", reflect.TypeOf((*MockITransactionRepo)(nil).GetByID), c, id)
}

// List mocks base method.
func (m *MockITransactionRepo) List(c context.Context, cond ListTransactionsCondition) ([]*model.Transaction, int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", c, cond)
	ret0, _ := ret[0].([]*model.Transaction)
	ret1, _ := ret[1].(int)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// List indicates an expected call of List.
func (mr *MockITransactionRepoMockRecorder) List(c, cond any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockITransactionRepo)(nil).List), c, cond)
}

// ListByAccount mocks base method.
func (m *MockITransactionRepo) ListByAccount(c context.Context, accountID string, cond ListTransactionsCondition) ([]*model.Transaction, int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListByAccount", c, accountID, cond)
	ret0, _ := ret[0].([]*model.Transaction)
	ret1, _ := ret[1].(int)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListByAccount indicates an expected call of ListByAccount.
func (mr *MockITransactionRepoMockRecorder) ListByAccount(c, accountID, cond any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListByAccount", reflect.TypeOf((*MockITransactionRepo)(nil).ListByAccount), c, accountID, cond)
}
