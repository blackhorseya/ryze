// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package scan

import (
	"fmt"

	"github.com/blackhorseya/ryze/app/domain/block"
	"github.com/blackhorseya/ryze/app/infra/configx"
	"github.com/blackhorseya/ryze/app/infra/otelx"
	"github.com/blackhorseya/ryze/app/infra/transports/grpcx"
	"github.com/blackhorseya/ryze/pkg/adapterx"
	"github.com/blackhorseya/ryze/pkg/contextx"
	"github.com/spf13/viper"
)

// Injectors from wire.go:

func New(v *viper.Viper) (adapterx.Service, error) {
	configuration, err := configx.NewConfiguration(v)
	if err != nil {
		return nil, err
	}
	application, err := initApplication(configuration)
	if err != nil {
		return nil, err
	}
	client, err := grpcx.NewClient(configuration)
	if err != nil {
		return nil, err
	}
	blockServiceClient, err := block.NewBlockServiceClient(client)
	if err != nil {
		return nil, err
	}
	service := NewService(application, blockServiceClient)
	return service, nil
}

// wire.go:

func initApplication(config *configx.Configuration) (*configx.Application, error) {
	app, err := config.GetService("block-scan")
	if err != nil {
		return nil, fmt.Errorf("failed to get block-scan config: %w", err)
	}

	err = otelx.SetupOTelSDK(contextx.Background(), app)
	if err != nil {
		return nil, fmt.Errorf("failed to setup OpenTelemetry SDK: %w", err)
	}

	return app, nil
}
