// Code generated by MockGen. DO NOT EDIT.
// Source: block.go
//
// Generated by this command:
//
//	mockgen -destination=./mock_block.go -package=repo -source=block.go
//

// Package repo is a generated GoMock package.
package repo

import (
	context "context"
	reflect "reflect"

	biz "github.com/blackhorseya/ryze/entity/domain/block/biz"
	model "github.com/blackhorseya/ryze/entity/domain/block/model"
	gomock "go.uber.org/mock/gomock"
)

// MockBlockCreator is a mock of BlockCreator interface.
type MockBlockCreator struct {
	ctrl     *gomock.Controller
	recorder *MockBlockCreatorMockRecorder
}

// MockBlockCreatorMockRecorder is the mock recorder for MockBlockCreator.
type MockBlockCreatorMockRecorder struct {
	mock *MockBlockCreator
}

// NewMockBlockCreator creates a new mock instance.
func NewMockBlockCreator(ctrl *gomock.Controller) *MockBlockCreator {
	mock := &MockBlockCreator{ctrl: ctrl}
	mock.recorder = &MockBlockCreatorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBlockCreator) EXPECT() *MockBlockCreatorMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockBlockCreator) Create(c context.Context, block *biz.Block) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", c, block)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockBlockCreatorMockRecorder) Create(c, block any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockBlockCreator)(nil).Create), c, block)
}

// MockBlockGetter is a mock of BlockGetter interface.
type MockBlockGetter struct {
	ctrl     *gomock.Controller
	recorder *MockBlockGetterMockRecorder
}

// MockBlockGetterMockRecorder is the mock recorder for MockBlockGetter.
type MockBlockGetterMockRecorder struct {
	mock *MockBlockGetter
}

// NewMockBlockGetter creates a new mock instance.
func NewMockBlockGetter(ctrl *gomock.Controller) *MockBlockGetter {
	mock := &MockBlockGetter{ctrl: ctrl}
	mock.recorder = &MockBlockGetterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBlockGetter) EXPECT() *MockBlockGetterMockRecorder {
	return m.recorder
}

// GetByID mocks base method.
func (m *MockBlockGetter) GetByID(c context.Context, id string) (*biz.Block, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByID", c, id)
	ret0, _ := ret[0].(*biz.Block)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByID indicates an expected call of GetByID.
func (mr *MockBlockGetterMockRecorder) GetByID(c, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByID", reflect.TypeOf((*MockBlockGetter)(nil).GetByID), c, id)
}

// List mocks base method.
func (m *MockBlockGetter) List(c context.Context, cond ListBlockCondition) ([]*biz.Block, int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", c, cond)
	ret0, _ := ret[0].([]*biz.Block)
	ret1, _ := ret[1].(int)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// List indicates an expected call of List.
func (mr *MockBlockGetterMockRecorder) List(c, cond any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockBlockGetter)(nil).List), c, cond)
}

// MockBlockRepo is a mock of BlockRepo interface.
type MockBlockRepo struct {
	ctrl     *gomock.Controller
	recorder *MockBlockRepoMockRecorder
}

// MockBlockRepoMockRecorder is the mock recorder for MockBlockRepo.
type MockBlockRepoMockRecorder struct {
	mock *MockBlockRepo
}

// NewMockBlockRepo creates a new mock instance.
func NewMockBlockRepo(ctrl *gomock.Controller) *MockBlockRepo {
	mock := &MockBlockRepo{ctrl: ctrl}
	mock.recorder = &MockBlockRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBlockRepo) EXPECT() *MockBlockRepoMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockBlockRepo) Create(c context.Context, block *biz.Block) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", c, block)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockBlockRepoMockRecorder) Create(c, block any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockBlockRepo)(nil).Create), c, block)
}

// GetByID mocks base method.
func (m *MockBlockRepo) GetByID(c context.Context, id string) (*biz.Block, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByID", c, id)
	ret0, _ := ret[0].(*biz.Block)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByID indicates an expected call of GetByID.
func (mr *MockBlockRepoMockRecorder) GetByID(c, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByID", reflect.TypeOf((*MockBlockRepo)(nil).GetByID), c, id)
}

// List mocks base method.
func (m *MockBlockRepo) List(c context.Context, cond ListBlockCondition) ([]*biz.Block, int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", c, cond)
	ret0, _ := ret[0].([]*biz.Block)
	ret1, _ := ret[1].(int)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// List indicates an expected call of List.
func (mr *MockBlockRepoMockRecorder) List(c, cond any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockBlockRepo)(nil).List), c, cond)
}

// MockBlockAdapter is a mock of BlockAdapter interface.
type MockBlockAdapter struct {
	ctrl     *gomock.Controller
	recorder *MockBlockAdapterMockRecorder
}

// MockBlockAdapterMockRecorder is the mock recorder for MockBlockAdapter.
type MockBlockAdapterMockRecorder struct {
	mock *MockBlockAdapter
}

// NewMockBlockAdapter creates a new mock instance.
func NewMockBlockAdapter(ctrl *gomock.Controller) *MockBlockAdapter {
	mock := &MockBlockAdapter{ctrl: ctrl}
	mock.recorder = &MockBlockAdapterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBlockAdapter) EXPECT() *MockBlockAdapterMockRecorder {
	return m.recorder
}

// ScanBlock mocks base method.
func (m *MockBlockAdapter) ScanBlock(c context.Context, req ScanBlockRequest, blockCh chan<- *biz.Block) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ScanBlock", c, req, blockCh)
	ret0, _ := ret[0].(error)
	return ret0
}

// ScanBlock indicates an expected call of ScanBlock.
func (mr *MockBlockAdapterMockRecorder) ScanBlock(c, req, blockCh any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ScanBlock", reflect.TypeOf((*MockBlockAdapter)(nil).ScanBlock), c, req, blockCh)
}

// MockIBlockRepo is a mock of IBlockRepo interface.
type MockIBlockRepo struct {
	ctrl     *gomock.Controller
	recorder *MockIBlockRepoMockRecorder
}

// MockIBlockRepoMockRecorder is the mock recorder for MockIBlockRepo.
type MockIBlockRepoMockRecorder struct {
	mock *MockIBlockRepo
}

// NewMockIBlockRepo creates a new mock instance.
func NewMockIBlockRepo(ctrl *gomock.Controller) *MockIBlockRepo {
	mock := &MockIBlockRepo{ctrl: ctrl}
	mock.recorder = &MockIBlockRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIBlockRepo) EXPECT() *MockIBlockRepoMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockIBlockRepo) Create(c context.Context, item *model.Block) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", c, item)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockIBlockRepoMockRecorder) Create(c, item any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockIBlockRepo)(nil).Create), c, item)
}

// GetByID mocks base method.
func (m *MockIBlockRepo) GetByID(c context.Context, id string) (*model.Block, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByID", c, id)
	ret0, _ := ret[0].(*model.Block)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByID indicates an expected call of GetByID.
func (mr *MockIBlockRepoMockRecorder) GetByID(c, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByID", reflect.TypeOf((*MockIBlockRepo)(nil).GetByID), c, id)
}

// List mocks base method.
func (m *MockIBlockRepo) List(c context.Context, condition ListCondition) ([]*model.Block, int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", c, condition)
	ret0, _ := ret[0].([]*model.Block)
	ret1, _ := ret[1].(int)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// List indicates an expected call of List.
func (mr *MockIBlockRepoMockRecorder) List(c, condition any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockIBlockRepo)(nil).List), c, condition)
}
